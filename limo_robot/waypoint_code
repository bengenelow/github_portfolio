#!/usr/bin/env python

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus  # Add this import

# List of waypoints as (position, orientation) tuples
waypoints = [
    #[(-0.0, 0.0, 0.0), (0.0, 0.0, -0.0, 1.0)], #Centa   
    [(2.49, -0.00, 0.0), (0.0, 0.0, 0.994, 0.105)],#Kieran Team(8)
    [(0.815, -1.176, 0.0), (0.0, 0.0, -0.771, 0.636)],#Our Team(2)
    [(2.254, -1.401, 0.0), (0.0, 0.0, 0.634, 0.773)],#Rahim Team(1)
    [(-0.444, -1.007, 0.0), (0.0, 0.0, 0.615, 0.788)],#Yong Zhun(3)
    [(-0.271, 0.505, 0.0), (0.0, 0.0, -0.103, 0.995)],#Daryl Team(4)
    [(-0.31, 2.277, 0.0), (0.0, 0.0, 0.042, 0.999)],#Jay Team(5)
    [(1.343, 1.676, 0.0), (0.0, 0.0, 0.993, 0.12)],#Yong Jie Team (6)
    [(2.672, 1.559, 0.0), (0.0, 0.0, -0.185, 0.983)]#Gerameel Team (7)
    ]


def goal_pose(pose):
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = 'map'
    goal.target_pose.header.stamp = rospy.Time.now()

    # Set position
    goal.target_pose.pose.position.x = pose[0][0]
    goal.target_pose.pose.position.y = pose[0][1]
    goal.target_pose.pose.position.z = pose[0][2]

    # Set orientation (quaternion)
    goal.target_pose.pose.orientation.x = pose[1][0]
    goal.target_pose.pose.orientation.y = pose[1][1]
    goal.target_pose.pose.orientation.z = pose[1][2]
    goal.target_pose.pose.orientation.w = pose[1][3]

    return goal

if __name__ == '__main__':
    rospy.init_node('simple_waypoint_navigator')

    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    rospy.loginfo("Waiting for move_base action server...")
    client.wait_for_server()
    rospy.loginfo("Connected to move_base!")

    # Go through each waypoint once with success check
    MAX_RETRIES = 20
    for idx, pose in enumerate(waypoints):
       if rospy.is_shutdown():
           break

       success = False
       for attempt in range(MAX_RETRIES):
           
           goal = goal_pose(pose)
           client.send_goal(goal)
           client.wait_for_result()

           state = client.get_state()
           if state == GoalStatus.SUCCEEDED:
               rospy.loginfo("Goal {idx + 1} reached successfully.")
               success = True
               rospy.sleep(2.0)
               break
           else:
               rospy.logwarn("Attempt {attempt + 1} failed for goal {idx + 1}.")

       if not success:
           rospy.logerr("Failed to reach goal {idx + 1} after {MAX_RETRIES} attempts. Aborting mission.")
           break

    rospy.loginfo("All waypoints processed.")
